var items = [];
var view;
var map;
var satelliteTileLayer;
var satelliteOnOff='off';
var createGraphic;
var genSatellite;
require(
	[
		"esri/Map",
		"esri/views/MapView",
		"esri/layers/VectorTileLayer",
		"esri/Graphic",
		"esri/geometry/Point",
		"esri/symbols/SimpleMarkerSymbol",
		"esri/geometry/Polyline",
		"esri/symbols/SimpleLineSymbol",
		"esri/geometry/Polygon",
		"esri/symbols/SimpleFillSymbol",
		"esri/symbols/PictureMarkerSymbol" ,
		"esri/layers/FeatureLayer",
		"esri/request","esri/layers/BaseTileLayer" ,
		"esri/symbols/FillSymbol" ,
		"esri/geometry/Circle"
	] , 
	function(Map, MapView, VectorTileLayer,Graphic, Point, SimpleMarkerSymbol,Polyline, SimpleLineSymbol,Polygon, SimpleFillSymbol, PictureMarkerSymbol , 
	FeatureLayer , esriRequest, BaseTileLayer  , FillSymbol, Circle
) {
	genSatellite = function(){
		// *******************************************************
		// Custom tile layer class code
		// Create a subclass of BaseTileLayer
		// *******************************************************
		var TintLayer = BaseTileLayer.createSubclass({
			properties: {
				urlTemplate: null,
				tint: {
					value: null
				}	
			},

			// generate the tile url for a given level, row and column
			getTileUrl: function(level, row, col) {
				return this.urlTemplate
					.replace("{z}", level)
					.replace("{x}", col)
					.replace("{y}", row);
			},

			// This method fetches tiles for the specified level and size.
			// Override this method to process the data returned from the server.
			fetchTile: function(level, row, col) {
				// call getTileUrl() method to construct the URL to tiles
				// for a given level, row and col provided by the LayerView
				var url = this.getTileUrl(level, row, col);

				// request for tiles based on the generated url
				return esriRequest(url, {
					responseType: "image"
				}).then(
					function(response) {
						// when esri request resolves successfully
						// get the image from the response
						var image = response.data;
						var width = this.tileInfo.size[0];
						var height = this.tileInfo.size[0];

						// create a canvas with 2D rendering context
						var canvas = document.createElement("canvas");
						var context = canvas.getContext("2d");
						canvas.width = width;
						canvas.height = height;

						// Apply the tint color provided by
						// by the application to the canvas
						if (this.tint) {
							// Get a CSS color string in rgba form
							// representing the tint Color instance.
							context.fillStyle = this.tint.toCss();
							//context.fillStyle = [136, 231, 39, 0.1];
							context.fillRect(0, 0, width, height);

							// Applies "difference" blending operation between canvas
							// and steman tiles. Difference blending operation subtracts
							// the bottom layer (canvas) from the top layer (tiles) or the
							// other way round to always get a positive value.
							context.globalCompositeOperation = "difference";
						}

						//context.globalAlpha = 0.4;

						// Draw the blended image onto the canvas.
						context.drawImage(image, 0, 0, width, height);

						return canvas;
					}.bind(this)
				);
			}
		});

		// *******************************************************
		// Start of JavaScript application
		// *******************************************************

		// Create a new instance of the TintLayer and set its properties
		satelliteTileLayer = new TintLayer({
			urlTemplate: "https://worldweather.wmo.int/images/satellite_img/{z}/{x}/{y}.png",
			opacity: 0.5,
			getTileUrl: function(level, row, col) 
			{
				var meta = {
					"3": {"colrow": [0, 0, 9, 5]},
					"4": {"colrow": [0, 0, 17, 9]}
				};
								
				var y = col + 1;
				var x = (row + Math.pow(2, level) + 1) % 10;
				var z = level;
				
				var colrow2 = "";

				if(typeof colrow != "undefined") colrow2 = meta[z].colrow;
				
				if (y < colrow2[0] || x < colrow2[1] || y > colrow2[2] || x > colrow2[3])
					return "";

				return this.urlTemplate
						.replace('{z}', z.toString())
						.replace('{y}', y.toString())
						.replace('{x}', x.toString());
			}
		});
	}

	// Create a Map
	map = new Map({});

	// Make map view and bind it to the map
	view = new MapView({
		container: "viewDiv",
		map: map,
		center: [ 42.89062499999978 , 2.811370999999979 ],
		zoom: 1
	});

	view.constraints = {
		minZoom: 1,
		maxZoom: 10
	};
	
	//dockOptions
	view.popup.dockOptions = {
		// Disable the dock button so users cannot undock the popup
		buttonEnabled: false,
		// Dock the popup when the size of the view is less than or equal to 600x1000 pixels
		breakpoint: {
			width: 600,
			height: 800
		}
	};

	/********************************************************************
	 * Add a vector tile layer to the map
	 *
	 * The url must point to the style or the vector tile service
	 *********************************************************************/
	var tileLayer = new VectorTileLayer({
		url: "https://tiles.arcgis.com/tiles/supi6xDj3qduY1gn/arcgis/rest/services/WMO_Agreed_Basemap_102100/VectorTileServer/resources/styles/root.json",
		copyright: '<a style="color: #d1d1d1;" href="https://public.wmo.int/en/disclaimer#mapdisclaimer" target="_blank">WMO disclaimer</a>'
	});
	map.add(tileLayer);

	createGraphic = function(_geometry,_symbol,_attributes,_popupTemplate){
		var tmpobj = {
			geometry: _geometry,
			symbol: _symbol
		}
		if(_attributes!="") tmpobj["attributes"] = _attributes;
		if(_popupTemplate!="") tmpobj["popupTemplate"] = _popupTemplate;
		
		var polylineGraphic = new Graphic(tmpobj);
		
		return polylineGraphic;
	}

	createCircleGraphic = function(_circle,_symbol,_attributes,_popupTemplate){
		var circle = new Circle(_circle);
		var circleGraphic = new Graphic({
			geometry: circle,
			symbol: _symbol,
			attributes:_attributes,
			popupTemplate:_popupTemplate
		});
		return circleGraphic;
	}


	view.watch('scale', function(newValue){
		//do something because the extent has changed. 
		
		var arr=[];
		jQuery("a[id*=lyr]").each(function() {
			if($(this).children('span').hasClass('select')) {
				arr.push(jQuery(this).attr('id'));
			}
		});
		
		if(arr.indexOf("lyr1")>=0) {
			view.graphics.removeAll();
			for(var i=0; i<pointAll.length ; i++) {
				view.graphics.add(pointAll[i]);
			}
		} else {
			var objAll = (weather_type=='pw_temp'?textAll:markerAll);
			var objLv1 = (weather_type=='pw_temp'?textLv1:markerLv1);
			var objLv2 = (weather_type=='pw_temp'?textLv2:markerLv2);

			if(arr.indexOf("lyr2")>=0) {
				view.graphics.removeAll();
				if(view.zoom<=2) {
					if(view.zoom<=1) {
						for(var i=0; i<objLv1.length ; i++) {
							view.graphics.add(objLv1[i]);
						}
					} else if(view.zoom==2) {
						for(var i=0; i<objLv2.length ; i++) {
							view.graphics.add(objLv2[i]);
						}
					} 
				} else if(view.zoom>=3) {
					for(var i=0; i<objAll.length ; i++) {
						view.graphics.add(objAll[i]);
					}		  
				}
			}
		}
	});

	view.when(function(){
	
		init();
			
		setTimeout(function(){
			view.popup.watch("selectedFeature", function(graphic) {
				var cityid = graphic["attributes"]["cityId"];
				window.location.href = "./city.html?cityId="+cityid;
			});
			
			$(document).bind('mousemove',function(e){ 
				previousX=mouseX;
				previousY=mouseY;
				mouseX = e.pageX;
				mouseY = e.pageY;
				
				if(mouseX-previousX>0) directionX="right";
				else directionX="left";
				
				if(mouseY-previousY>0) directionY="bottom";
				else directionY="top";
			}); 

            view.on("pointer-move", eventHandler);

            function eventHandler(event) {
              // the hitTest() checks to see if any graphics in the view
              // intersect the x, y coordinates of the pointer
              view.hitTest(event).then(getGraphics);
            }

            function getGraphics(response) {
				// the topmost graphic from the hurricanesLayer
				// and display select attribute values from the
				// graphic to the user
				if (response.results.length>1) {
				
					var cityName = response.results[0].graphic["attributes"]["cityName"];
					
					var tmpmouseX = mouseX;
					if(directionX=="right") tmpmouseX = mouseX+25;
					
					var tmpmouseY = mouseY+12;
					if(directionY=="bottom") tmpmouseY = mouseY-12;
					
					if(jQuery(".msgbox").length==0) {
						jQuery("#viewDiv").append('<div class="msgbox" style="background-color:#fff; position:absolute; z-index:999; left:'+tmpmouseX+'px; top:'+tmpmouseY+'px">'+cityName+'</div>');
					} else {
						jQuery("msgbox").css({left:tmpmouseX,top:tmpmouseY});
					}
					jQuery("#viewDiv").css('cursor','pointer');
				} else {
					jQuery("#viewDiv").css('cursor','default');
					jQuery(".msgbox").remove();
				}
			}

		},1000);

	});
});

var previousX=0;
var previousY=0;
var mouseX=0;
var mouseY=0;
var directionX="";
var directionY="";

var distance_record=[];
var distance_record2=[];

var markerLv1 = [];
var markerLv2 = [];
var markerAll = [];

var textLv1 = [];
var textLv2 = [];
var textAll = [];

var pointAll = [];

var weather_type = "pw_icon"; //Present Weather

var flag_satellite = false;
var compareDistance=function(_lat,_lon,_lv,_cityid) {
	var boo = true;
	
	var arr = distance_record2; //lv 2
	if(_lv<=1) arr = distance_record; //lv 1
	
	for(var i=0; i<arr.length; i++) {
	
		var from = turf.point([arr[i][1], arr[i][0]]);
		var to = turf.point([_lon, _lat]);
		var options = {units: 'miles'};
		
		var distance = turf.distance(from, to, options);
		
		if(_lv<=1) {
			if(distance<600) {
				boo = false;
				break;  
			}
		} else {
			if(distance<400) {
				boo = false;
				break;  
			}
		}
	}
	
	if(_cityid != -1) boo = true;
	
	return boo;
}

function ajax_get_present_info(noId) {
	//var param = new Array(noId);
	$.ajax({
		url: "./json/present.xml",
		type: "GET",
		dataType: "text",
		async: false,
		success: function (Jdata) {
			if (Jdata.length > 0) {
				present_json_data = JSON.parse(Jdata);
				//ajaxRefreshHandling(ajax_get_present_info, "ajaxPresent", 0, param);

				var presents = present_json_data["present"];
				for(key in presents) {
					var present = presents[key];
					city_data_present[present["cityId"]] = present;
				}
			
			} else {
				//ajaxRefreshHandling(ajax_get_present_info, "ajaxPresent", 1, param);
			}
		},
		error: function () {
			//ajaxRefreshHandling(ajax_get_present_info, "ajaxPresent", 1, param);
		}
	});
}
function init(){

	ajax_get_present_info('');
	ajax_get_member_info_sitemap1(pageLang);
	
	write_time(); //satellite time	  
	var tmp_arr = [];
	for(key in present_json_data["present"]) {
		var info = present_json_data["present"][key];
		var cityId = info["cityId"];
		var temp = info["temp"];
		if(temp=="NaN" || temp == "" || temp == null)
			temp = "";
		if(temp != "" && currentTempUnit == "F") 
			temp = (convert_c2f(parseInt(temp)));
		
		//if(info["wxImageCode"]=="") { continue; }
		if(info["wxImageCode"]!="" || info["temp"]!="") {
		
			var tmpcityobj = city_data[cityId];
			
			if(tmpcityobj == null) { 
				console.log('tmpcityobj is null: ' + cityId);
				continue;
			}

			// Create a point
			var point = {
				type: "point",
				longitude: tmpcityobj["cityLongitude"],
				latitude: tmpcityobj["cityLatitude"]
			};
			//image
			var picSymbol = {
				type: 	"picture-marker",  // autocasts as new PictureMarkerSymbol()
				url: 	"../images/wxicon_small/is"+parseInt(info["wxImageCode"])+info["daynightcode"]+".png",
				width: 	"32px",
				height: "24px"
			};
			var popupTemplate = {
				//'content': '<div style="width:300px;"><a href="http://worldweather.wmo.int/en/city.html?cityId='+cityId+'">link</a></div>'
				//'content': 'console.log("@")'
			};
			popupTemplate = {};
			
			var attributes = {
				"cityId" : cityId,
				"temp": temp,
				"cityName": city_data[cityId]["cityName"]
			}
			var tmpobj = createGraphic(point,picSymbol,attributes,popupTemplate)
			
			var textSymbol = {
				type: "text",  // autocasts as new TextSymbol()
				color: "blue",
				text: temp,
				xoffset: 3,
				yoffset: 3,
				font: {  // autocast as new Font()
					size: 10,
					family: "sans-serif",
					//weight: "bold"
				}
			};
			var tmpobjtext = createGraphic(point,textSymbol,attributes,popupTemplate)
				
			if(distance_record.length==0) {
				distance_record.push([tmpcityobj["cityLatitude"],tmpcityobj["cityLongitude"]]);
				distance_record2.push([tmpcityobj["cityLatitude"],tmpcityobj["cityLongitude"]]);
			}
			else {
				var setcityid = -1;
				var setcityid_lv_1_pool = [300,367,382,401,425,432,452,1809];
				var setcityid_lv_2_pool = [300,323,367,382,369,401,425,432,452,1315,1705,1732,1747,1809];
				
				if(setcityid_lv_1_pool.indexOf(tmpcityobj["cityId"]) > -1) {
					setcityid = tmpcityobj["cityId"];
				}
				
				var level=1; //zoom level
				var boo = compareDistance(tmpcityobj["cityLatitude"],tmpcityobj["cityLongitude"],level,setcityid);
				if(boo==true) {
					distance_record.push([tmpcityobj["cityLatitude"],tmpcityobj["cityLongitude"]]);
					if(info["wxImageCode"]!="") {
						markerLv1.push(tmpobj);
					}
					if(info["temp"]!="") {
						textLv1.push(tmpobjtext);
					}
				}

				setcityid = -1;
				if(setcityid_lv_2_pool.indexOf(tmpcityobj["cityId"]) > -1) {
					setcityid = tmpcityobj["cityId"];
				}
				
				level=2; //zoom level
				boo = compareDistance(tmpcityobj["cityLatitude"],tmpcityobj["cityLongitude"],level,setcityid);
				if(boo==true) {
					distance_record2.push([tmpcityobj["cityLatitude"],tmpcityobj["cityLongitude"]]);
					if(info["wxImageCode"]!="") {
						markerLv2.push(tmpobj);
					}
					if(info["temp"]!="") {
						textLv2.push(tmpobjtext);
					}
				}
			}

			
			if(info["wxImageCode"]!="") { 
				markerAll.push(tmpobj);
			}
			if(info["temp"]!="") { 
				textAll.push(tmpobjtext);
			}
		
		}
	}
	
	for(key in city_data) {
		
		var cityobj = city_data[key];
		
		if(cityobj["forecast"]=='Y' || cityobj["climate"]=='Y') {

			var info = city_data_present[key];
			var temp = info["temp"];
			
			// Create a point
			var point = {
				type: "point",
				longitude: cityobj["cityLongitude"],
				latitude: cityobj["cityLatitude"]
			};
			
			var fillcolor = [190, 28, 93];
			if(cityobj["forecast"] == 'N' && cityobj["climate"] == 'Y') {
				fillcolor = [14, 161, 80];
			}
			if(cityobj["isCapital"]==true) {
				fillcolor = [229, 147, 17];
			}
		
			var markerSymbol = {
				type: 	"simple-marker",
				color: fillcolor,
				outline: {
					color: [255, 255, 255],
					width: 0
				},
				size: 5
			};
			
			var popupTemplate = {};
			
			var attributes = {
				"cityId" : key,
				"cityName": city_data[key]["cityName"]								 
			}
			var tmpobj = createGraphic(point,markerSymbol,attributes,popupTemplate)
			
			pointAll.push(tmpobj);
		
		}
	}

	if(getCookie('map_e') != null && getCookie('map_e_user_for') == '1') {
		jQuery("#lyr1").trigger("click");
	} else {
		jQuery("#lyr2").trigger("click");
	}

}

function setMapCenter(lat, lng, zoomlv) {
	lat = parseFloat(lat);
	lng = parseFloat(lng);
    if (forecastCityObj || cityObj) {
        var chkObj = (forecastCityObj) ? forecastCityObj : cityObj;
        if (chkObj[0].cityId == 1954) {
			view.goTo({	center: [144.743900000, 13.462700000], zoom: 3 });
        } else {
			view.goTo({ center: [lng, lat], zoom: zoomlv });
        }
    } else {
		view.goTo({ center: [lng, lat], zoom: zoomlv });
    }
}

function changeSatellite(_action,_boo_zoom) {
	if(_boo_zoom==1) { 
		var tmpzoom = view.zoom;
		
		if(tmpzoom<=2) tmpzoom = 2;
		else tmpzoom = 3;

		/*view.goTo({
			center: [view.center["longitude"],view.center["latitude"]],
			zoom: tmpzoom
		});*/
		view.center = [view.center["longitude"],view.center["latitude"]];
		view.zoom = tmpzoom;
	}						 
	
	var effecttime=1;
	if(_boo_zoom==1) effecttime=2000;						  
	setTimeout(function(){
		if(_action=="on") {
			if(flag_satellite==false) {									 
				genSatellite();					
				map.add(satelliteTileLayer);
				flag_satellite=true;
			}
		} else {
			map.remove(satelliteTileLayer);
			flag_satellite=false;								 
		}	
	},effecttime);
}

var present_json_data = null;
var member_json_data_map=null;
var city_id=null;
var city_data = {};
var city_data_present = {};


function ajax_get_member_info_sitemap1(lang) {
	$.ajax({
		url: "./json/Country_"+lang+".xml",
		type: "GET",
		dataType: "text",
		async: false,
		success: function(Jdata) {
			member_json_data_map = JSON.parse(Jdata);
			
			var members = member_json_data_map["member"];
			for(key in members) {
				var member = members[key];
				
				var cities = member["city"];
				
				for(idx in cities) {
					var city = cities[idx];
					
					city_data[city["cityId"]] = city;
				}
			}
		},
		error: function() {
			console.log("ERROR!!!");
		}
	});
}

function write_time() { 
	if(getCookie('map_e_user_sat') == "1") {
		read_txt();
	}
}

var osm_layerid;
var show_satellite_layer = 0;
var show_present_weather_layer = 0;
var load_present_weather = 0;
var show_smaill_vectors = 0;

function pw_select(select_option){
	weather_type = select_option;
	
	if($('#lyr2').children('span').hasClass('select')) {
		for(var i=0; i<pointAll.length ; i++) {
			view.graphics.remove(pointAll[i]);
		}

		var textObj = textAll;
		var markerObj = markerAll;
		if(view.zoom<=1) {
			textObj = textLv1;
			markerObj = markerLv1;
		} else if(view.zoom<=2) {
			textObj = textLv2;
			markerObj = markerLv2;
		}
		if(weather_type == 'pw_temp') {
			for(var i=0; i<markerObj.length ; i++) {
				view.graphics.remove(markerObj[i]);
			}
			for(var i=0; i<textObj.length ; i++) {
				view.graphics.add(textObj[i]);
			}
		} else {
			for(var i=0; i<markerObj.length ; i++) {
				view.graphics.add(markerObj[i]);
			}
			for(var i=0; i<textObj.length ; i++) {
				view.graphics.remove(textObj[i]);
			}
		}
	}
}
	 
function home_layerCtrl(layerid) {
	
	osm_layerid = layerid;
    $('.map_layer_control').find('span[class*=tick]').eq(layerid - 1).removeClass('ticked').addClass('unticked');
	
	var arr=[];
	jQuery("a[id*=lyr]").each(function() {
		if($(this).children('span').hasClass('select')) {
			arr.push(jQuery(this).attr('id'));
		}
	});	
	
	var markerObj = (weather_type=='pw_temp'?textAll:markerAll);
	if(view.zoom<=1) {
		markerObj = (weather_type=='pw_temp'?textLv1:markerLv1);
	} else if(view.zoom<=2) {
		markerObj = (weather_type=='pw_temp'?textLv2:markerLv2);
	}

	if(arr.indexOf("lyr3")>=0) { // satellite image
		changeSatellite('on',1);
	} else {
		changeSatellite('off',0);
	}

	if(arr.indexOf("lyr1")>=0) { // forecast / climatology
		for(var i=0; i<pointAll.length ; i++) {
			view.graphics.add(pointAll[i]);
		}
		
		for(var i=0; i<markerAll.length ; i++) {
			view.graphics.remove(markerAll[i]);
		}
		for(var i=0; i<textAll.length ; i++) {
			view.graphics.remove(textAll[i]);
		}
	} else {
		for(var i=0; i<pointAll.length ; i++) {
			view.graphics.remove(pointAll[i]);
		}
	}
				   
	if(arr.indexOf("lyr2")>=0) { // present weather

		for(var i=0; i<pointAll.length ; i++) {
			view.graphics.remove(pointAll[i]);
		}
		
		for(var i=0; i<markerObj.length ; i++) {
			view.graphics.add(markerObj[i]);
		}
		if(weather_type=='pw_temp') {
			for(var i=0; i<markerAll.length; i++) {
				view.graphics.remove(markerAll[i]);
			}
		} else {
			for(var i=0; i<textAll.length; i++) {
				view.graphics.remove(textAll[i]);
			}
		}
	} else { 
		for(var i=0; i<markerAll.length ; i++) { 
			view.graphics.remove(markerAll[i]); 
		} 
		for(var i=0; i<textAll.length ; i++) { 
			view.graphics.remove(textAll[i]); 
		}
	}

    if (layerid == 1) {
        if (show_smaill_vectors == 1) {
            show_smaill_vectors = 0;
            show_present_weather_layer = 0;
        } else {
            show_smaill_vectors = 1;
        }
    }

    if (layerid == 2) {
		var present_weather_option = $('input[name=pw_option]:checked', '#present_weather_option_form').val();
        if (load_present_weather == 1 && show_present_weather_layer == 0) {
            show_present_weather_layer = 1;
            show_smaill_vectors = 0;
        } else if (show_present_weather_layer == 0 && load_present_weather == 0) {
            show_present_weather_layer = 1;
            load_present_weather = 1;
        } else if (show_present_weather_layer == 1 && load_present_weather == 1) {		
			show_present_weather_layer = 0;
        } 
		
		if(!$('#lyr2').children('span').hasClass( "select")){
			show_present_weather_layer = 0;
		}	
    }

    if (layerid == 3) {
		
        if (show_satellite_layer == 0) {
            show_satellite_layer = 1;
            show_smaill_vectors = 0;
        } else {
            show_satellite_layer = 0;
        }
    }
    $('.map_layer_control').find('span[class*=tick]').eq(layerid - 1).removeClass('unticked').addClass('ticked');

}